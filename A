# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14GS6std--L1gGxXnxJdoQMWDweCNrF1A
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from statsmodels.tsa.arima.model import ARIMA
from sklearn.model_selection import train_test_split

# Generate synthetic data for the demonstration (same as the previous example)
np.random.seed(42)

# Create dataset with 15 rows and 10 columns
data = {
    'Time': pd.date_range(start='2023-01-01', periods=15, freq='D'),
    'Energy_Consumption': np.random.randint(100, 500, size=15),  # Random energy consumption in kWh
    'Temperature': np.random.uniform(10, 30, size=15),  # Random temperatures between 10°C and 30°C
    'Humidity': np.random.uniform(40, 80, size=15),  # Random humidity percentages
    'Day_of_Week': pd.date_range(start='2023-01-01', periods=15, freq='D').dayofweek,  # 0-6 (Mon-Sun)
    'Hour_of_Day': np.random.randint(0, 24, size=15),  # Random hour of the day
    'Weekday': np.random.choice([0, 1], size=15),  # Random 0 (weekend) or 1 (weekday)
    'Weekend': np.random.choice([0, 1], size=15),  # Random 0 (weekend) or 1 (weekday)
    'Previous_Consumption': np.random.randint(50, 450, size=15),  # Previous day's consumption
    'Weather_Forecast': np.random.choice(['Sunny', 'Cloudy', 'Rainy', 'Windy'], size=15)  # Random weather
}

# Convert to DataFrame
df = pd.DataFrame(data)

# Set 'Time' column as index
df.set_index('Time', inplace=True)

# Use only 'Energy_Consumption' for forecasting
series = df['Energy_Consumption']

# Plot the energy consumption data
plt.figure(figsize=(10, 6))
plt.plot(series, label="Energy Consumption (kWh)", color='blue')
plt.title("Energy Consumption Over Time")
plt.xlabel("Date")
plt.ylabel("Energy Consumption (kWh)")
plt.legend()
plt.show()

# Split the data into training and testing datasets (80% train, 20% test)
train, test = series[:12], series[12:]

# Build an ARIMA model
# p=5, d=1, q=0 based on trial and error or grid search
model = ARIMA(train, order=(5, 1, 0))

# Fit the ARIMA model to the training data
model_fit = model.fit()

# Summary of the ARIMA model
print(model_fit.summary())

# Make predictions on the test data
forecast = model_fit.forecast(steps=len(test))

# Plot the actual vs predicted values
plt.figure(figsize=(10, 6))
plt.plot(train.index, train, label="Training Data", color='blue')
plt.plot(test.index, test, label="Test Data (Actual)", color='green')
plt.plot(test.index, forecast, label="Predicted Data", color='red', linestyle='--')
plt.title("Energy Consumption Forecasting Using ARIMA")
plt.xlabel("Date")
plt.ylabel("Energy Consumption (kWh)")
plt.legend()
plt.show()

# Evaluate the model using Mean Absolute Error (MAE)
from sklearn.metrics import mean_absolute_error

mae = mean_absolute_error(test, forecast)
print(f"Mean Absolute Error (MAE): {mae}")
